# -*- coding: utf-8 -*-
"""modeling_class.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ri61R2y4A4zcAlNk0E7LGlFmQoYjirRW
"""


import pickle
from tensorflow.keras.models import load_model
import pandas as pd
import numpy as np

#wirite ML-model to model_pickle file
#with open('model_pickle', 'wb') as f:
#    pickle.dump(model, f)

#save DL-model with keras.models.save_model
#tf.keras.models.save_model(model, export_path,overwrite=True,include_optimizer=True,
#    save_format=None, signatures=None,    options=None)

import enum
# Using enum class create enumerations
class Data_type(enum.Enum):
   ECG=0
   BLOODCELL=1

class ML_type(enum.Enum):
  DL=0
  ML=1

class Modeling():
  
  def __init__(self,data_type,ML_type):
    self.data_type=data_type
    self.ML_type=ML_type
    #print(self.data_type)
    #print(self.ML_type)
    self.model=self.load_model()
    

  def load_model(self):  
    """
    load model from the model file    
    """  
    MODEL_DIR=self.get_model_path() #get the pre-train model file path
    #print(MODEL_DIR)
    if self.ML_type==ML_type.DL:
    # loading DL model and return instance
      return load_model(MODEL_DIR) 
    
    #read Machine Learning model from model_pickle file
    if ML_type==ML_type.ML:
       with open(MODEL_DIR, 'rb') as f:
         return pickle.load(f)    

  def get_model_path(self):
    #todo: get the path and Data_type from database
    if self.data_type==Data_type.ECG:
      return '/content/drive/My Drive/master_project/ECG_Model.h5' 
    if self.data_type==Data_type.BLOODCELL:
      return '/content/drive/My Drive/master_project/Blood_Cell_Model.h5'

  def model_predict(self,df):
    """
    to predict the result with the model
    input : formated data fit the model
    input type DataFrame
    """
    return self.model.predict(df)

  #test
